rwCV.percent <- eigenrWCV$values / sum(eigenrWCV$values)
rwCR.percent <- eigenrWCR$values / sum(eigenrWCR$values)
wWCV.percent <- eigenwWCV$values / sum(eigenwWCV$values)
wWCR.percent <- eigenwWCR$values / sum(eigenwWCR$values)
WCV.percent <- eigenWCV$values / sum(eigenWCV$values)
WCR.percent <- eigenWCR$values / sum(eigenWCR$values)
rwCV.percent
rwCR.percent
wWCV.percent
wWCR.percent
WCV.percent
WCR.percent
cumsum(rwCV.percent)
cumsum(rwCR.percent)
cumsum(wWCV.percent)
cumsum(wWCR.percent)
cumsum(WCV.percent)
cumsum(WCR.percent)
rWVecV = eigenrWCV$vectors[,1:2]
rWVecR = eigenrWCR$vectors[,1:2]
wWVecV = eigenwWCV$vectors[,1:2]
wWVecR = eigenwWCR$vectors[,1:2]
WVecV = eigenWCV$vectors[,1:2]
WVecR = eigenWCR$vectors[,1:2]
rw.V.PC1 <- as.matrix(rw.Scaled) %*% rWVecV[,1]
rw.V.PC2 <- as.matrix(rw.Scaled) %*% rWVecV[,2]
rw.R.PC1 <- as.matrix(rw.Scaled) %*% rWVecR[,1]
rw.R.PC2 <- as.matrix(rw.Scaled) %*% rWVecR[,2]
ww.V.PC1 <- as.matrix(ww.Scaled) %*% wWVecV[,1]
ww.V.PC2 <- as.matrix(ww.Scaled) %*% wWVecV[,2]
ww.R.PC1 <- as.matrix(ww.Scaled) %*% wWVecR[,1]
ww.R.PC2 <- as.matrix(ww.Scaled) %*% wWVecR[,2]
w.V.PC1 <- as.matrix(w.Scaled) %*% WVecV[,1]
w.V.PC2 <- as.matrix(w.Scaled) %*% WVecV[,2]
w.R.PC1 <- as.matrix(w.Scaled) %*% WVecR[,1]
w.R.PC2 <- as.matrix(w.Scaled) %*% WVecR[,2]
rW.CV.PCS <- data.frame(RWCOV.index = row.names(rw), rw.V.PC1, rw.V.PC2)
rW.CR.PCS <- data.frame(RWCOR.index = row.names(rw), rw.R.PC1, rw.R.PC2)
wW.CV.PCS <- data.frame(WWCOV.index = row.names(ww), ww.V.PC1, ww.V.PC2)
wW.CR.PCS <- data.frame(WWCOR.index = row.names(ww), ww.R.PC1, ww.R.PC2)
W.CV.PCS <- data.frame(WCOV.index = row.names(w), w.V.PC1, w.V.PC2)
W.CR.PCS <- data.frame(WCOR.index = row.names(w), w.R.PC1, w.R.PC2)
ggplot(W.CV.PCS, aes(w.V.PC1, w.V.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WCOV.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Wine Covariance")
# W.CV.PCS
# eigenWCV
ggplot(W.CR.PCS, aes(w.R.PC1, w.R.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WCOR.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Wine Correlation")
# W.CR.PCS
# eigenWCR
newWine <- Wine
newWine$color[newWine$color == "Red"] <- 0
newWine$color[newWine$color == "White"] <- 1
newWine$color <- as.numeric(newWine$color)
Data = sort(sample(nrow(newWine), nrow(newWine)*.7))
trainingData <- newWine[Data,]
testingData <- newWine[-Data,]
str(newWine)
aggregateWineModel <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + sulphates + alcohol + color, data = trainingData) # All variables contributing
summary(aggregateWineModel)
aggregateDecantedWineModel <- glm(quality ~ (free.sulfur.dioxide * total.sulfur.dioxide) + (sulphates * chlorides * alcohol * residual.sugar) + alcohol + residual.sugar, data = trainingData) # All variables contributing
summary(aggregateDecantedWineModel)
prediction <- round(predict(aggregateDecantedWineModel, testingData, type = 'response'))
prediction <- as.factor(prediction)
testingQuality <- as.factor(testingData$quality)
confusionMatrix(data = prediction, reference = testingQuality)
generalModel <- lm(color ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol + quality, data = trainingData, family = binomial)
summary(generalModel)
decantedModel <- lm(color ~ (free.sulfur.dioxide * total.sulfur.dioxide) + (sulphates * chlorides * alcohol * residual.sugar * fixed.acidity * volatile.acidity) * total.sulfur.dioxide + quality , data = trainingData, family = binomial(link = logit))
colorPrediction <- round(predict(decantedModel, testingData, type = 'response'))
table(data = colorPrediction, reference = testingData$color)
# Temporary solution that will inevitably become permanent
TP = 456
FP = 8 + 5 + 1
FN = 20
TN = 1458
sprintf("Accuracy Level: %f", (TP + TN) / (FP + FN + TP + TN))
sprintf("Inaccuracy Level: %f", (FP + FN)/(TP + TN))
plot(Wine$total.free, Wine$quality, col = 'Black', pch = 19, cex = .5, xlab = 'Activated Sulfur', ylab = 'Quality', main = 'Activated Sulfur by Wine Quality')
ggplot(rW.CV.PCS, aes(rw.V.PC1, rw.V.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = RWCOV.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Red Wine Covariance")
ggplot(rW.CR.PCS, aes(rw.R.PC1, rw.R.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = RWCOR.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Red Wine Correlation")
ggplot(wW.CV.PCS, aes(ww.V.PC1, ww.V.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WWCOV.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("White Wine Covariance")
ggplot(wW.CR.PCS, aes(ww.R.PC1, ww.R.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WWCOR.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("White Wine Correlation")
redWineModel <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data = redWine) # All variables contributing
summary(redWineModel)
whiteWineModel <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data = whiteWine) # All variables contributing
summary(whiteWineModel)
View(redWine)
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d\nMissing Values of White Wine: %d", redNA, whiteNA)
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d
Missing Values of White Wine: %d", redNA, whiteNA)
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d n
Missing Values of White Wine: %d", redNA, whiteNA)
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d \n Missing Values of White Wine: %d", redNA, whiteNA)
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d \n\n Missing Values of White Wine: %d", redNA, whiteNA)
corWine <- cor(Wine)
corWine <- cor(Wine %>% select(-color))
corrplot(corWine)
tempWine <- Wine %>% select(-rating)
tempPreProcess <- preProcess(tempWine, method=c("center", "scale"))
normalizedWine <- predict(tempPreProcess, tempWine)
plot(normalizedWine)
tempWine <- (Wine %>% select(-rating))
tempPreProcess <- preProcess(tempWine, method=c("center", "scale"))
normalizedWine <- predict(tempPreProcess, tempWine)
plot(normalizedWine)
tempWine <- (Wine %>% select(-color, -rating))
tempPreProcess <- preProcess(tempWine, method=c("center", "scale"))
normalizedWine <- predict(tempPreProcess, tempWine)
plot(normalizedWine)
View(redWine)
library(tidyverse)
library(ggplot2)
library(caret)
library(corrplot)
set.seed(101)
redWine <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"), sep=";")
whiteWine <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"), sep=";")
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d", redNA)
sprintf("Missing Values of White Wine: %d", whiteNA)
redWine$total.free <- (redWine$total.sulfur.dioxide - redWine$free.sulfur.dioxide)
whiteWine$total.free <- (whiteWine$total.sulfur.dioxide - whiteWine$free.sulfur.dioxide)
redWine$color <- ("Red")
whiteWine$color <- ("White")
redWine$rating <- ifelse(redWine$quality >= 7, 1, 0) # We consider good quality  wines to be rated 7 or greater.
whiteWine$rating <- ifelse(whiteWine$quality >= 7, 1, 0)
Wine <- rbind(redWine, whiteWine)
Wine$quality <- as.numeric(Wine$quality) # Ensuring quality is read as a number and not an object type.
redWine <- redWine %>% select(-color)
whiteWine <- whiteWine %>% select(-color)
redWine <- redWine %>% select(-density)
whiteWine <- whiteWine %>% select(-density)
Wine <- Wine %>% select(-density)
# Cleaning residual data created from improper datatypes.
redWine$alcohol <- round(redWine$alcohol, digits = 1)
redWine$residual.sugar <- round(redWine$residual.sugar, digits = 1)
redWine$free.sulfur.dioxide <- round(redWine$free.sulfur.dioxide, digits = 0)
redWine$total.sulfur.dioxide <- round(redWine$total.sulfur.dioxide, digits = 0)
whiteWine$alcohol <- round(whiteWine$volatile.acidity, digits = 2)
whiteWine$residual.sugar <- round(whiteWine$residual.sugar, digits = 1)
whiteWine$free.sulfur.dioxide <- round(whiteWine$free.sulfur.dioxide, digits = 0)
whiteWine$total.sulfur.dioxide <- round(whiteWine$total.sulfur.dioxide, digits = 0)
whiteWine$total.free <- round(whiteWine$total.free, digits = 0)
corWine <- cor(Wine %>% select(-color))
corrplot(corWine)
tempWine <- (Wine %>% select(-color, -rating))
tempPreProcess <- preProcess(tempWine, method=c("center", "scale"))
normalizedWine <- predict(tempPreProcess, tempWine)
plot(normalizedWine)
View(Wine)
View(whiteWine)
View(redWine)
rm("tempPreProcess", "tempWine") #Removing temporary Variables
IsOutlier <- function(data) {
lowerq = quantile(data)[2]
upperq = quantile(data)[4]
iqr = upperq - lowerq
threshold_upper = (iqr * 1.5) + upperq
threshold_lower = lowerq - (iqr * 1.5)
data > threshold_upper | data <  threshold_lower
}
redWineOutliers = redWine[rowSums(sapply(redWine %>% select(-rating), IsOutlier)) > 0, ]
whiteWineOutliers = whiteWine[rowSums(sapply(whiteWine %>% select(-rating), IsOutlier)) > 0, ]
WineOutliers = Wine[rowSums(sapply(Wine %>% select(-color, -rating), IsOutlier)) > 0, ]
redOutliers <- as.integer(count(redWineOutliers))
whiteOutliers <- as.integer(count(whiteWineOutliers))
WineOutliers <- as.integer(count(WineOutliers))
sprintf("Number of Outliers In Red Wine Data: %i", redOutliers)
sprintf("Number of Outliers In White Wine Data: %i", whiteOutliers)
sprintf("Number of Outliers In Wine Data: %i", WineOutliers)
summary(Wine %>% select(-color)) #Aggregated Wine Data Summary
View(Wine)
library(tidyverse)
library(ggplot2)
library(caret)
library(corrplot)
set.seed(101)
redWine <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"), sep=";")
whiteWine <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"), sep=";")
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d", redNA)
sprintf("Missing Values of White Wine: %d", whiteNA)
redWine$total.free <- (redWine$total.sulfur.dioxide - redWine$free.sulfur.dioxide)
whiteWine$total.free <- (whiteWine$total.sulfur.dioxide - whiteWine$free.sulfur.dioxide)
redWine$color <- ("Red")
whiteWine$color <- ("White")
redWine$rating <- ifelse(redWine$quality >= 7, 1, 0) # We consider good quality  wines to be rated 7 or greater.
whiteWine$rating <- ifelse(whiteWine$quality >= 7, 1, 0)
Wine <- rbind(redWine, whiteWine)
Wine$quality <- as.numeric(Wine$quality) # Ensuring quality is read as a number and not an object type.
redWine <- redWine %>% select(-color)
whiteWine <- whiteWine %>% select(-color)
redWine <- redWine %>% select(-density)
whiteWine <- whiteWine %>% select(-density)
Wine <- Wine %>% select(-density)
# Cleaning residual data created from improper datatypes.
redWine$alcohol <- round(redWine$alcohol, digits = 1)
redWine$residual.sugar <- round(redWine$residual.sugar, digits = 1)
redWine$free.sulfur.dioxide <- round(redWine$free.sulfur.dioxide, digits = 0)
redWine$total.sulfur.dioxide <- round(redWine$total.sulfur.dioxide, digits = 0)
whiteWine$alcohol <- round(whiteWine$volatile.acidity, digits = 2)
whiteWine$residual.sugar <- round(whiteWine$residual.sugar, digits = 1)
whiteWine$free.sulfur.dioxide <- round(whiteWine$free.sulfur.dioxide, digits = 0)
whiteWine$total.sulfur.dioxide <- round(whiteWine$total.sulfur.dioxide, digits = 0)
whiteWine$total.free <- round(whiteWine$total.free, digits = 0)
Wine$alcohol <- round(Wine$alcohol, digits = 1)
corWine <- cor(Wine %>% select(-color))
corrplot(corWine)
tempWine <- (Wine %>% select(-color, -rating))
tempPreProcess <- preProcess(tempWine, method=c("center", "scale"))
normalizedWine <- predict(tempPreProcess, tempWine)
plot(normalizedWine)
rm("tempPreProcess", "tempWine") #Removing temporary Variables
IsOutlier <- function(data) {
lowerq = quantile(data)[2]
upperq = quantile(data)[4]
iqr = upperq - lowerq
threshold_upper = (iqr * 1.5) + upperq
threshold_lower = lowerq - (iqr * 1.5)
data > threshold_upper | data <  threshold_lower
}
redWineOutliers = redWine[rowSums(sapply(redWine %>% select(-rating), IsOutlier)) > 0, ]
whiteWineOutliers = whiteWine[rowSums(sapply(whiteWine %>% select(-rating), IsOutlier)) > 0, ]
WineOutliers = Wine[rowSums(sapply(Wine %>% select(-color, -rating), IsOutlier)) > 0, ]
redOutliers <- as.integer(count(redWineOutliers))
whiteOutliers <- as.integer(count(whiteWineOutliers))
WineOutliers <- as.integer(count(WineOutliers))
sprintf("Number of Outliers In Red Wine Data: %i", redOutliers)
sprintf("Number of Outliers In White Wine Data: %i", whiteOutliers)
sprintf("Number of Outliers In Wine Data: %i", WineOutliers)
redWine <- redWine[-c(1300, 152, 481, 1436, 1435, 259, 1080, 1082, 92, 87, 93, 152),]
whiteWine <- whiteWine[-c(1527, 4040, 746, 3153, 2782, 485, 4746, 1218, 2128),]
Wine <- Wine[-c(1300, 2345, 4381, 152, 259, 6345, 3017, 3727, 92, 87, 93, 152),]
View(Wine)
View(Wine)
View(whiteWine)
View(redWine)
library(tidyverse)
library(ggplot2)
library(caret)
library(corrplot)
set.seed(101)
redWine <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"), sep=";")
whiteWine <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"), sep=";")
redNA <- sum(is.na(redWine))
whiteNA <- sum(is.na(whiteWine))
sprintf("Missing Values of Red Wine: %d", redNA)
sprintf("Missing Values of White Wine: %d", whiteNA)
redWine$total.free <- (redWine$total.sulfur.dioxide - redWine$free.sulfur.dioxide)
whiteWine$total.free <- (whiteWine$total.sulfur.dioxide - whiteWine$free.sulfur.dioxide)
redWine$color <- ("Red")
whiteWine$color <- ("White")
redWine$rating <- ifelse(redWine$quality >= 7, 1, 0) # We consider good quality  wines to be rated 7 or greater.
whiteWine$rating <- ifelse(whiteWine$quality >= 7, 1, 0)
Wine <- rbind(redWine, whiteWine)
Wine$quality <- as.numeric(Wine$quality) # Ensuring quality is read as a number and not an object type.
redWine <- redWine %>% select(-color)
whiteWine <- whiteWine %>% select(-color)
redWine <- redWine %>% select(-density)
whiteWine <- whiteWine %>% select(-density)
Wine <- Wine %>% select(-density)
# Cleaning residual data created from improper datatypes.
redWine$alcohol <- round(redWine$alcohol, digits = 1)
redWine$residual.sugar <- round(redWine$residual.sugar, digits = 1)
redWine$free.sulfur.dioxide <- round(redWine$free.sulfur.dioxide, digits = 0)
redWine$total.sulfur.dioxide <- round(redWine$total.sulfur.dioxide, digits = 0)
whiteWine$alcohol <- round(whiteWine$volatile.acidity, digits = 2)
whiteWine$residual.sugar <- round(whiteWine$residual.sugar, digits = 1)
whiteWine$free.sulfur.dioxide <- round(whiteWine$free.sulfur.dioxide, digits = 0)
whiteWine$total.sulfur.dioxide <- round(whiteWine$total.sulfur.dioxide, digits = 0)
whiteWine$total.free <- round(whiteWine$total.free, digits = 0)
Wine$alcohol <- round(Wine$alcohol, digits = 1)
corWine <- cor(Wine %>% select(-color))
corrplot(corWine)
tempWine <- (Wine %>% select(-color, -rating))
tempPreProcess <- preProcess(tempWine, method=c("center", "scale"))
normalizedWine <- predict(tempPreProcess, tempWine)
plot(normalizedWine)
rm("tempPreProcess", "tempWine") #Removing temporary Variables
IsOutlier <- function(data) {
lowerq = quantile(data)[2]
upperq = quantile(data)[4]
iqr = upperq - lowerq
threshold_upper = (iqr * 1.5) + upperq
threshold_lower = lowerq - (iqr * 1.5)
data > threshold_upper | data <  threshold_lower
}
redWineOutliers = redWine[rowSums(sapply(redWine %>% select(-rating), IsOutlier)) > 0, ]
whiteWineOutliers = whiteWine[rowSums(sapply(whiteWine %>% select(-rating), IsOutlier)) > 0, ]
WineOutliers = Wine[rowSums(sapply(Wine %>% select(-color, -rating), IsOutlier)) > 0, ]
redOutliers <- as.integer(count(redWineOutliers))
whiteOutliers <- as.integer(count(whiteWineOutliers))
WineOutliers <- as.integer(count(WineOutliers))
sprintf("Number of Outliers In Red Wine Data: %i", redOutliers)
sprintf("Number of Outliers In White Wine Data: %i", whiteOutliers)
sprintf("Number of Outliers In Wine Data: %i", WineOutliers)
redWine <- redWine[-c(1300, 152, 481, 1436, 1435, 259, 1080, 1082, 92, 87, 93, 152, 128, 127, 107, 82,  724, 170, 14, 227),]
whiteWine <- whiteWine[-c(1527, 4040, 746, 3153, 2782, 485, 4746, 1218, 2128, 1664, 1654, 1932, 3051, 1418),]
Wine <- Wine[-c(1300, 2345, 4381, 152, 259, 6345, 3017, 3727, 92, 87, 93, 152, 4752, 128, 127, 673, 3262, 3253, 3531, 4650, 724, 170, 14, 227),]
summary(redWine)
summary(whiteWine)
summary(Wine %>% select(-color)) #Aggregated Wine Data Summary
ggplot(Wine, aes(x = quality, fill = color)) +
labs(title = "Distribution of Quality by Wine Type") +
geom_histogram(alpha = 0.4, position = "identity",  binwidth = 1)
ggplot(Wine, aes(x = free.sulfur.dioxide, y = total.sulfur.dioxide)) +
theme_dark() +
geom_point(aes(color = quality)) +
labs(title = "Total vs Free Sulfur Quality") +
stat_density_2d(aes(fill = ..level.., alpha = ..level..), geom = 'polygon', color = "black", countour_var = "quality",  show.legend = FALSE) +
geom_smooth(data = redWine, method = lm, se = FALSE, col = "red") +
geom_smooth(data = whiteWine, method = lm, se = FALSE, col = "white")
ggplot(Wine, aes(x = free.sulfur.dioxide, y = total.sulfur.dioxide) ) +
labs(title = "Total to Free Sulfur Density") +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE)  +
geom_smooth(data = redWine, method = lm, se = FALSE, aes(col = "red")) +
geom_smooth(data = whiteWine, method = lm, se = FALSE, aes(col = "white"))+
scale_colour_manual(name = "Avg. Per Wine", values = c("Red", "White"), labels = c("Red Wine", "White Wine"))
plot(redWine$total.sulfur.dioxide, redWine$quality, col = 'red', pch = 19, cex = .5, xlab = 'Total Sulfur', ylab = 'Quality', main = 'Red Wine Quality to Total Sulfur')
plot(whiteWine$total.sulfur.dioxide, whiteWine$quality, col = 'Blue', pch = 19, cex = .5, xlab = 'Total Sulfur', ylab = 'Quality', main = 'White Wine Quality to Total Sulfur')
plot(redWine$free.sulfur.dioxide, redWine$quality, col = 'Red', pch = 19, cex = .5, xlab = 'Free Sulfur', ylab = 'Quality', main = 'Red Wine Quality to Free Sulfur')
plot(whiteWine$free.sulfur.dioxide, whiteWine$quality, col = 'Blue', pch = 19, cex = .5, xlab = 'Free Sulfur', ylab = 'Quality', main = 'White Wine Quality to Free Sulfur')
plot(Wine$free.sulfur.dioxide, Wine$quality, col = 'Black', pch = 19, cex = .5, xlab = 'Free Sulfur', ylab = 'Quality', main = 'Free Sulfur by Wine Quality')
plot(Wine$total.sulfur.dioxide, Wine$quality, col = 'Black', pch = 19, cex = .5, xlab = 'Total Sulfur', ylab = 'Quality', main = 'Total Sulfur by Wine Quality')
rw <- redWine %>% select(-residual.sugar, -chlorides, -total.sulfur.dioxide, -free.sulfur.dioxide, -pH, -sulphates, -alcohol, -total.free, -quality)
ww <- whiteWine %>% select(-residual.sugar, -chlorides, -total.sulfur.dioxide, -free.sulfur.dioxide, -pH, -sulphates, -alcohol, -total.free, -quality)
w <- Wine %>% select(-residual.sugar, -chlorides, -total.sulfur.dioxide, -free.sulfur.dioxide, -pH, -sulphates, -alcohol, -total.free, -color, -quality)
rw.Scaled <- scale(rw)
ww.Scaled <- scale(ww)
w.Scaled <- scale(w)
RWCOV <- cov(rw)
RWCOR <- cor(rw)
WWCOV <- cov(ww)
WWCOR <- cor(ww)
WCOV <- cov(w)
WCOR <- cor(w)
eigenrWCV <- eigen(RWCOV)
eigenrWCR <- eigen(RWCOR)
eigenwWCV <- eigen(WWCOV)
eigenwWCR <- eigen(WWCOR)
eigenWCV <- eigen(WCOV)
eigenWCR <- eigen(WCOR)
rwCV.percent <- eigenrWCV$values / sum(eigenrWCV$values)
rwCR.percent <- eigenrWCR$values / sum(eigenrWCR$values)
wWCV.percent <- eigenwWCV$values / sum(eigenwWCV$values)
wWCR.percent <- eigenwWCR$values / sum(eigenwWCR$values)
WCV.percent <- eigenWCV$values / sum(eigenWCV$values)
WCR.percent <- eigenWCR$values / sum(eigenWCR$values)
rwCV.percent
rwCR.percent
wWCV.percent
wWCR.percent
WCV.percent
WCR.percent
cumsum(rwCV.percent)
cumsum(rwCR.percent)
cumsum(wWCV.percent)
cumsum(wWCR.percent)
cumsum(WCV.percent)
cumsum(WCR.percent)
rWVecV = eigenrWCV$vectors[,1:2]
rWVecR = eigenrWCR$vectors[,1:2]
wWVecV = eigenwWCV$vectors[,1:2]
wWVecR = eigenwWCR$vectors[,1:2]
WVecV = eigenWCV$vectors[,1:2]
WVecR = eigenWCR$vectors[,1:2]
rw.V.PC1 <- as.matrix(rw.Scaled) %*% rWVecV[,1]
rw.V.PC2 <- as.matrix(rw.Scaled) %*% rWVecV[,2]
rw.R.PC1 <- as.matrix(rw.Scaled) %*% rWVecR[,1]
rw.R.PC2 <- as.matrix(rw.Scaled) %*% rWVecR[,2]
ww.V.PC1 <- as.matrix(ww.Scaled) %*% wWVecV[,1]
ww.V.PC2 <- as.matrix(ww.Scaled) %*% wWVecV[,2]
ww.R.PC1 <- as.matrix(ww.Scaled) %*% wWVecR[,1]
ww.R.PC2 <- as.matrix(ww.Scaled) %*% wWVecR[,2]
w.V.PC1 <- as.matrix(w.Scaled) %*% WVecV[,1]
w.V.PC2 <- as.matrix(w.Scaled) %*% WVecV[,2]
w.R.PC1 <- as.matrix(w.Scaled) %*% WVecR[,1]
w.R.PC2 <- as.matrix(w.Scaled) %*% WVecR[,2]
rW.CV.PCS <- data.frame(RWCOV.index = row.names(rw), rw.V.PC1, rw.V.PC2)
rW.CR.PCS <- data.frame(RWCOR.index = row.names(rw), rw.R.PC1, rw.R.PC2)
wW.CV.PCS <- data.frame(WWCOV.index = row.names(ww), ww.V.PC1, ww.V.PC2)
wW.CR.PCS <- data.frame(WWCOR.index = row.names(ww), ww.R.PC1, ww.R.PC2)
W.CV.PCS <- data.frame(WCOV.index = row.names(w), w.V.PC1, w.V.PC2)
W.CR.PCS <- data.frame(WCOR.index = row.names(w), w.R.PC1, w.R.PC2)
ggplot(W.CV.PCS, aes(w.V.PC1, w.V.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WCOV.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Wine Covariance")
# W.CV.PCS
# eigenWCV
ggplot(W.CR.PCS, aes(w.R.PC1, w.R.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WCOR.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Wine Correlation")
# W.CR.PCS
# eigenWCR
newWine <- Wine
newWine$color[newWine$color == "Red"] <- 0
newWine$color[newWine$color == "White"] <- 1
newWine$color <- as.numeric(newWine$color)
Data = sort(sample(nrow(newWine), nrow(newWine)*.7))
trainingData <- newWine[Data,]
testingData <- newWine[-Data,]
str(newWine)
aggregateWineModel <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + sulphates + alcohol + color, data = trainingData) # All variables contributing
summary(aggregateWineModel)
aggregateDecantedWineModel <- glm(quality ~ (free.sulfur.dioxide * total.sulfur.dioxide) + (sulphates * chlorides * alcohol * residual.sugar) + alcohol + residual.sugar, data = trainingData) # All variables contributing
summary(aggregateDecantedWineModel)
prediction <- round(predict(aggregateDecantedWineModel, testingData, type = 'response'))
prediction <- as.factor(prediction)
testingQuality <- as.factor(testingData$quality)
confusionMatrix(data = prediction, reference = testingQuality)
generalModel <- lm(color ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol + quality, data = trainingData, family = binomial)
summary(generalModel)
decantedModel <- lm(color ~ (free.sulfur.dioxide * total.sulfur.dioxide) + (sulphates * chlorides * alcohol * residual.sugar * fixed.acidity * volatile.acidity) * total.sulfur.dioxide + quality , data = trainingData, family = binomial(link = logit))
colorPrediction <- round(predict(decantedModel, testingData, type = 'response'))
table(data = colorPrediction, reference = testingData$color)
# Temporary solution that will inevitably become permanent
TP = 456
FP = 8 + 5 + 1
FN = 20
TN = 1458
sprintf("Accuracy Level: %f", (TP + TN) / (FP + FN + TP + TN))
sprintf("Inaccuracy Level: %f", (FP + FN)/(TP + TN))
summary(redWine)
summary(whiteWine)
plot(Wine$total.free, Wine$quality, col = 'Black', pch = 19, cex = .5, xlab = 'Activated Sulfur', ylab = 'Quality', main = 'Activated Sulfur by Wine Quality')
ggplot(rW.CV.PCS, aes(rw.V.PC1, rw.V.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = RWCOV.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Red Wine Covariance")
ggplot(rW.CR.PCS, aes(rw.R.PC1, rw.R.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = RWCOR.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("Red Wine Correlation")
ggplot(wW.CV.PCS, aes(ww.V.PC1, ww.V.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WWCOV.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("White Wine Covariance")
ggplot(wW.CR.PCS, aes(ww.R.PC1, ww.R.PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = WWCOR.index), size = 2) +
xlab("fixed.acidity PC") +
ylab("wolatile.acidity PC") +
ggtitle("White Wine Correlation")
redWineModel <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data = redWine) # All variables contributing
summary(redWineModel)
whiteWineModel <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data = whiteWine) # All variables contributing
summary(whiteWineModel)
